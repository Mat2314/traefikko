version: "3"

services:
  traefik:
    build:
      context: .
      dockerfile: Traefik.Dockerfile
    ports:
      - 80:80
      - 443:443
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik-public-certificates:/certificates"
    networks:
      - traefik-network

  db:
    image: postgres
    volumes:
      - ./postgres_data/db:/var/lib/postgresql/data
    networks:
      - traefik-network
    environment:
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure

  api:
    build:
        dockerfile: Django.Dockerfile
        context: .
    volumes:
      - ./api:/code
    expose:
      - 8000
    networks:
      - traefik-network
    environment:
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    labels:
      # Standard configuration
      - "traefik.enable=true"
      - "traefik.http.routers.django.rule=Host(`${API_HOST}`)"
      - "traefik.http.services.django.loadbalancer.server.port=8000"
      - "traefik.docker.network=traefik-network"
      # HTTPS configuration
      - "traefik.http.routers.django.tls=true"
      - "traefik.http.routers.django.tls.certresolver=letsencrypt"
      - "traefik.http.routers.django.entrypoints=websecure"

  frontend:
    build:
      dockerfile: Frontend.Dockerfile
      context: .
    networks:
      - traefik-network
    depends_on:
      - api
    labels:
      # Standard configuration
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${APP_HOST}`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.docker.network=traefik-network"
      # HTTPS configuration
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.frontend.entrypoints=websecure"

  staticfiles:
    build:
      dockerfile: Staticfiles.Dockerfile
      context: .
    networks:
      - traefik-network
    depends_on:
      - api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.staticfiles.rule=Host(`${STATICFILES_HOST}`)"
      - "traefik.http.routers.staticfiles.entrypoints=web"
      - "traefik.http.services.staticfiles.loadbalancer.server.port=80"
      - traefik.docker.network=traefik-network


volumes:
  traefik-public-certificates:

networks:
  traefik-network:
